//////////////////////////////////////////////////////////////////////
// This file is automatically generated with
// the following parameters:
// Author: Jie Lei
// Date: 07/03/2024
//////////////////////////////////////////////////////////////////////
#include "phaseRotation.hpp"

// Add phase rotation to the PHY header and Payload data after modulation
void phaseRotation(stream<ap_int<PHY_HEADER_BITS>> phyHeader[NUM_STRM], stream<comp17_t> payloadData[NUM_STRM],
                   stream<comp16_t> phaseRotData[NUM_STRM])
{
    comp17_t phaRot_coeff[NUM_STRM][NUM_USED_SUBC] = {
        {comp17_t(1,0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(1.0,0.0)}, 
        {comp17_t(0.70709228515625,0.70709228515625), comp17_t(0.0,1.0), comp17_t(-0.70709228515625,0.70709228515625), comp17_t(-1.0,0.0), comp17_t(-0.70709228515625,-0.70709228515625), comp17_t(0.0,-1.0), comp17_t(0.70709228515625,-0.70709228515625), comp17_t(1.0,0.0), comp17_t(1.0,0.0), comp17_t(0.70709228515625,0.70709228515625), comp17_t(0.0,1.0), comp17_t(-0.70709228515625,0.70709228515625), comp17_t(-1.0,0.0), comp17_t(-0.70709228515625,-0.70709228515625), comp17_t(0.0,-1.0), comp17_t(0.70709228515625,-0.70709228515625)}, 
        {comp17_t(0.92388916015625,0.3826904296875), comp17_t(0.70709228515625,0.70709228515625), comp17_t(0.3826904296875,0.92388916015625), comp17_t(0.0,1.0), comp17_t(-0.3826904296875,0.92388916015625), comp17_t(-0.70709228515625,0.70709228515625), comp17_t(-0.92388916015625,0.3826904296875), comp17_t(-1.0,0.0), comp17_t(-1.0,0.0), comp17_t(-0.92388916015625,-0.3826904296875), comp17_t(-0.70709228515625,-0.70709228515625), comp17_t(-0.3826904296875,-0.92388916015625), comp17_t(0.0,-1.0), comp17_t(0.3826904296875,-0.92388916015625), comp17_t(0.70709228515625,-0.70709228515625), comp17_t(0.92388916015625,-0.3826904296875)}, 
        {comp17_t(0.3826904296875,0.92388916015625), comp17_t(-0.70709228515625,0.70709228515625), comp17_t(-0.92388916015625,-0.3826904296875), comp17_t(0.0,-1.0), comp17_t(0.92388916015625,-0.3826904296875), comp17_t(0.70709228515625,0.70709228515625), comp17_t(-0.3826904296875,0.92388916015625), comp17_t(-1.0,0.0),comp17_t(-1.0,0.0), comp17_t(-0.3826904296875,-0.92388916015625), comp17_t(0.70709228515625,-0.70709228515625), comp17_t(0.92388916015625,0.3826904296875), comp17_t(0.0,1.0), comp17_t(-0.92388916015625,0.3826904296875), comp17_t(-0.70709228515625,-0.70709228515625), comp17_t(0.3826904296875,-0.92388916015625)}}; // Phase rotation coefficients

    comp17_t tmpComp;
    comp16_t tmpRotData;
    ap_int<PHY_HEADER_BITS> tmpBits;
    fixed17_t tmpReal, tmpImag;
    // Apply phase rotation
    for (int i = 0; i < NUM_STRM; i++) {
        for (int j = 0; j < NUM_PAYLOAD+NUM_PHY_HEADER; j++) {
            for (int k = 0; k < NUM_USED_SUBC; k++) {
                if (j == 0) {
                    tmpBits = phyHeader[i].read();
                    tmpReal = (fixed17_t)tmpBits / 2;
                    tmpComp.real(tmpReal);
                    tmpComp.imag(0);
                } else {
                    tmpComp = payloadData[i].read();
                    tmpReal = tmpComp.real() / 2;
                    tmpImag = tmpComp.imag() / 2;
                    tmpComp.real(tmpReal);
                    tmpComp.imag(tmpImag);
                }
                tmpRotData = tmpComp * phaRot_coeff[i][k];
                phaseRotData[i].write(tmpRotData);
            }
        }
    }
}