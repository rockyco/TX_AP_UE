//////////////////////////////////////////////////////////////////////////////
// This file is automatically generated by the SystemC 1.0.1 generator
// Based on the following files:
// runFFT/runFFT_tb.cpp
// Author: Jie Lei
// Date: 11/03/2024
//////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <vector>
#include <fstream>
#include <complex>
#include <iostream>
#include "runFFT.hpp"

// This is the testbench for testing the runFFT module
int main(void) {
    // Define the input and output data
    stream<comp16_t> inData[NUM_STRM];
    stream<cmpxDataOut> outData[NUM_STRM];
    comp16_t inDataBuf[NUM_STRM][NUM_TOTAL_SYMBOLS][U_FFT_LENGTH];
    comp16_t tmpInData;
    cmpxDataOut tmpOutData;
    cmpxDataOut outDataBuf[NUM_STRM][NUM_TOTAL_SYMBOLS][U_FFT_LENGTH];
    cmpxDataOut goldenData[NUM_STRM][NUM_TOTAL_SYMBOLS][U_FFT_LENGTH];
    float rm, im;
    //Reading the file from .txt file
    FILE *fp_in;
    fp_in = fopen("data4FFT.txt", "r");
    if (fp_in == NULL) {
        printf("FILE NOT FOUND\n");// Error, file not found
        return 1;
    }    
    for (int j = 0; j < NUM_TOTAL_SYMBOLS; j++) {
        for (int i = 0; i < NUM_STRM; i++) {
            for (int k = 0; k < NUM_USED_SUBC; k++) {
                fscanf(fp_in, "%f%fi\t", &rm, &im);
                tmpInData = {rm, im};
                inDataBuf[i][j][k] = tmpInData;
                inData[i].write(tmpInData);
            }
            fscanf(fp_in,"\n");
        }
    }
    fclose(fp_in);
    // Write the input data to the .txt file
    FILE *fp_in_write;
    fp_in_write = fopen("inData.txt", "w");
    if (fp_in_write == NULL) {
        printf("FILE NOT FOUND\n");// Error, file not found
        return 1;
    }
    for (int j = 0; j < NUM_TOTAL_SYMBOLS; j++) {
        for (int i = 0; i < NUM_STRM; i++) {
            for (int k = 0; k < NUM_USED_SUBC; k++) {
                tmpInData = inDataBuf[i][j][k];
                fprintf(fp_in_write, "%f%+fi\t", (float)tmpInData.real(), (float)tmpInData.imag());
            }
            fprintf(fp_in_write, "\n");
        }
    }
    fclose(fp_in_write);

    // Call the runFFT module
    runFFT(inData, outData);
    // Read the output data from the runFFT module
    data_out_t rm_out, im_out;
    FILE *fp_out;
    fp_out = fopen("outData.txt", "w");
    if (fp_out == NULL) {
        printf("FILE NOT FOUND\n");// Error, file not found
        return 1;
    }
    for (int j = 0; j < NUM_TOTAL_SYMBOLS; j++) {
        for (int i = 0; i < NUM_STRM; i++) {
            for (int k = 0; k < U_FFT_LENGTH; k++) {
                tmpOutData = outData[i].read();
                rm_out = 2 * tmpOutData.real();
                im_out = 2 * tmpOutData.imag();
                tmpOutData = {rm_out, im_out};
                outDataBuf[i][j][k] = tmpOutData;
                fprintf(fp_out, "%f%+fi\t", (float)tmpOutData.real(), (float)tmpOutData.imag());
            }
            fprintf(fp_out, "\n");
        }
    }
    fclose(fp_out);
    // Read the golden data from the file
    FILE *fp_golden;
    fp_golden = fopen("goldenFFT.txt", "r");
    if (fp_golden == NULL) {
        printf("FILE NOT FOUND\n");// Error, file not found
        return 1;
    }
    for (int j = 0; j < NUM_TOTAL_SYMBOLS; j++) {
        for (int i = 0; i < NUM_STRM; i++) {
            for (int k = 0; k < U_FFT_LENGTH; k++) {
                fscanf(fp_golden, "%f%fi\t", &rm, &im);
                goldenData[i][j][k] = {rm, im};
            }
            fscanf(fp_golden,"\n");
        }
    }
    fclose(fp_golden);
    // Compare the output data with the golden data
    int err_cnt = 0;
    for (int j = 0; j < NUM_TOTAL_SYMBOLS; j++) {
        for (int i = 0; i < NUM_STRM; i++) {
            for (int k = 0; k < U_FFT_LENGTH; k++) {
                if ((std::abs((float)outDataBuf[i][j][k].real() - (float)goldenData[i][j][k].real()) >= 0.001) || (std::abs((float)outDataBuf[i][j][k].imag() - (float)goldenData[i][j][k].imag()) >= 0.001)) {
                    err_cnt++;
                    printf("ERROR: i=%d, j=%d, k=%d, outData=%f%+fi, goldenData=%f%+fi\n", i, j, k, (float)outDataBuf[i][j][k].real(), (float)outDataBuf[i][j][k].imag(), (float)goldenData[i][j][k].real(), (float)goldenData[i][j][k].imag());
                }
            }
        }
    }
    if (err_cnt == 0) {
        printf("TEST PASSED\n");
    } else {
        printf("TEST FAILED\n");
    }
    return err_cnt;
}
